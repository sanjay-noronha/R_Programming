Overview:
--------
The tidyverse is a collection of open source R packages introduced by Hadley Wickham[1] and his team that "share an 
underlying design philosophy, grammar, and data structures" of tidy data.
dplyr is a fast and powerful R package written by Hadley Wickham and Romain Francois  that provides a consistent and 
concise grammar for manipulating tabular data.
The dplyr philosophy is to have small functions that each do one thing well. Specifically, dplyr
supplies five 'verbs' that cover most fundamental data manipulation tasks: 
select(), filter(), arrange(), mutate(), and summarize()

One unique aspect of dplyr is that the same set of tools allow you to work with tabular data from a variety of sources, including data frames, data tables, databases and multidimensional
arrays. 

Tags:
-----
data frame, data frame table, dplyr, cran, select, filter, mutate, arrange, summarize, quantile, group_by, rename

Code:
-----
* The first step of working with data in dplyr is to load the data into what the package authors call a 'data frame tbl' or 'tbl_df'
  The main advantage to using a tbl_df over a regular data frame is the printing.
  cran <- tbl_df(mydf) 

* select [ Select columns ]
  - select(cran, ip_id, package, country)
  - select(cran, r_arch:country) #consecutive columns
  - select(cran, -time) #omitting certain columns
   
* rename [ to rename columns]
  - cran <- rename(cran, newVar = oldVar)
  
* filter [ Filter rows ]
  - filter(cran, package == "swirl")
  - filter(cran, r_version == "3.1.1", country == "US") # multiple AND criteria
  - filter(cran, country == "US" | country == "IN") # OR criteria
  _ filter(cran, !is.na(r_version)) # ignore NA rows of column = r_version
  
* arrange [ Sometimes we want to ORDER the rows of a dataset according to the values of a particular variable. This is the job of arrange() ]
 - arrange(cran2, ip_id)
 - arrange(cran2, desc(ip_id)) # in descending order
 - arrange(cran2, country, desc(r_version), ip_id)# sorting by multiple columns


* mutate [It's common to create a new variable based on the value of one or more variables already in a dataset. The mutate() function does exactly this. ]
 -  mutate(cran3, size_mb = size / 2^20) # adding a new variable to the table
 - mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10) # can create new variables based on previous new variables
 
 * summarize [ The last of the five core dplyr verbs, summarize(), collapses the dataset to a single row. 
               summarize() can give you the requested value FOR EACH group in your dataset.]
  - summarize(cran, avg_bytes = mean(size))
  
 * group_by [ The main idea behind grouping data is that you want to break up your dataset into groups of rows based 
               on the values of one or more variables. The group_by() function is reponsible for
            ]
   - group_by(cran, package)
   - summarize(by_package, mean(size)) # In this case the output will be grouped by package
   -  summarize(by_package,
                      count = n(),
                      unique = n_distinct(ip_id),
                      countries = n_distinct(country),
                      avg_bytes = mean(size)) # can use multiple summary functions
   - filter(pack_sum, count > quantile(pack_sum$count, probs = 0.99) # pick up the top 1 percentile

* Chaining [ %>% ]
 - The benefit of %>% is that it allows us to chain the function calls in a linear fashion
 - The code to the right of %>% operates on the result from the code to the left of %>%

* A good example of chaining
  sat %>%
  select(-contains("total")) %>%
  gather(part_sex, count, -score_range) %>%
  separate(part_sex, c("part", "sex")) %>%
  group_by(part, sex)  %>%
  mutate(total = sum(count),
         prop = count/total
  ) %>% 
  print
